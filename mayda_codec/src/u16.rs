use std::simd;
use std::ptr;
use std::slice;

unsafe fn encode_u16_0_8(_: *const u16, _: *mut u32) { }
unsafe fn encode_u16_0_16(_: *const u16, _: *mut u32) { }
unsafe fn encode_u16_0_24(_: *const u16, _: *mut u32) { }
unsafe fn encode_u16_0_32(_: *const u16, _: *mut u32) { }
unsafe fn encode_u16_1_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u16_1_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u16_1_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
}
unsafe fn encode_u16_1_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
}
unsafe fn encode_u16_2_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u16_2_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
}
unsafe fn encode_u16_2_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u16_2_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
}
unsafe fn encode_u16_3_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
}
unsafe fn encode_u16_3_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u16_3_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u16_3_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
}
unsafe fn encode_u16_4_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u16_4_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u16_4_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u16_4_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u16_5_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u16_5_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u16_5_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
}
unsafe fn encode_u16_5_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
}
unsafe fn encode_u16_6_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u16_6_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
}
unsafe fn encode_u16_6_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u16_6_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
}
unsafe fn encode_u16_7_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
}
unsafe fn encode_u16_7_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u16_7_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u16_7_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
}
unsafe fn encode_u16_8_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u16_8_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u16_8_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u16_8_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u16_9_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u16_9_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u16_9_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u16_9_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
}
unsafe fn encode_u16_10_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u16_10_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
}
unsafe fn encode_u16_10_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u16_10_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
}
unsafe fn encode_u16_11_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u16_11_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u16_11_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u16_11_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
}
unsafe fn encode_u16_12_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u16_12_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u16_12_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u16_12_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u16_13_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u16_13_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u16_13_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u16_13_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
}
unsafe fn encode_u16_14_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u16_14_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
}
unsafe fn encode_u16_14_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u16_14_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
}
unsafe fn encode_u16_15_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u16_15_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u16_15_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u16_15_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
}
unsafe fn encode_u16_16_8(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u16_16_16(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u16_16_24(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u16_16_32(mut i_ptr: *const u16, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
pub const ENCODE_U16: [[unsafe fn(*const u16, *mut u32); 4usize]; 17usize] =
    [[encode_u16_0_8, encode_u16_0_16, encode_u16_0_24, encode_u16_0_32],
        [encode_u16_1_8, encode_u16_1_16, encode_u16_1_24, encode_u16_1_32],
        [encode_u16_2_8, encode_u16_2_16, encode_u16_2_24, encode_u16_2_32],
        [encode_u16_3_8, encode_u16_3_16, encode_u16_3_24, encode_u16_3_32],
        [encode_u16_4_8, encode_u16_4_16, encode_u16_4_24, encode_u16_4_32],
        [encode_u16_5_8, encode_u16_5_16, encode_u16_5_24, encode_u16_5_32],
        [encode_u16_6_8, encode_u16_6_16, encode_u16_6_24, encode_u16_6_32],
        [encode_u16_7_8, encode_u16_7_16, encode_u16_7_24, encode_u16_7_32],
        [encode_u16_8_8, encode_u16_8_16, encode_u16_8_24, encode_u16_8_32],
        [encode_u16_9_8, encode_u16_9_16, encode_u16_9_24, encode_u16_9_32],
        [encode_u16_10_8, encode_u16_10_16, encode_u16_10_24, encode_u16_10_32],
        [encode_u16_11_8, encode_u16_11_16, encode_u16_11_24, encode_u16_11_32],
        [encode_u16_12_8, encode_u16_12_16, encode_u16_12_24, encode_u16_12_32],
        [encode_u16_13_8, encode_u16_13_16, encode_u16_13_24, encode_u16_13_32],
        [encode_u16_14_8, encode_u16_14_16, encode_u16_14_24, encode_u16_14_32],
        [encode_u16_15_8, encode_u16_15_16, encode_u16_15_24, encode_u16_15_32],
        [encode_u16_16_8, encode_u16_16_16, encode_u16_16_24, encode_u16_16_32]];
unsafe fn decode_u16_0_8(_: *const u32, o_ptr: *mut u16) {
    ptr::write_bytes(o_ptr, 0u8, 8usize);
}
unsafe fn decode_u16_0_16(_: *const u32, o_ptr: *mut u16) {
    ptr::write_bytes(o_ptr, 0u8, 16usize);
}
unsafe fn decode_u16_0_24(_: *const u32, o_ptr: *mut u16) {
    ptr::write_bytes(o_ptr, 0u8, 24usize);
}
unsafe fn decode_u16_0_32(_: *const u32, o_ptr: *mut u16) {
    ptr::write_bytes(o_ptr, 0u8, 32usize);
}
unsafe fn decode_u16_1_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_1_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_1_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_1_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_2_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_2_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_2_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_2_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_3_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_3_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_3_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_3_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_4_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_4_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_4_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_4_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_5_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_5_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_5_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_5_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_6_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_6_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_6_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_6_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_7_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_7_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_7_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_7_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_8_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_8_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_8_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_8_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_9_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_9_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_9_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_9_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_10_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_10_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_10_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_10_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_11_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_11_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_11_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_11_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_12_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_12_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_12_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_12_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_13_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_13_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_13_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_13_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_14_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_14_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_14_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_14_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_15_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_15_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_15_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_15_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mask: u16 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u16;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u16) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u16;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u16;
    *o_ptr = out & mask;
}
unsafe fn decode_u16_16_8(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
}
unsafe fn decode_u16_16_16(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
}
unsafe fn decode_u16_16_24(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
}
unsafe fn decode_u16_16_32(mut s_ptr: *const u32, mut o_ptr: *mut u16) {
    let mut out;
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u16;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u16;
    *o_ptr = out;
}
pub const DECODE_U16: [[unsafe fn(*const u32, *mut u16); 4usize]; 17usize] =
    [[decode_u16_0_8, decode_u16_0_16, decode_u16_0_24, decode_u16_0_32],
        [decode_u16_1_8, decode_u16_1_16, decode_u16_1_24, decode_u16_1_32],
        [decode_u16_2_8, decode_u16_2_16, decode_u16_2_24, decode_u16_2_32],
        [decode_u16_3_8, decode_u16_3_16, decode_u16_3_24, decode_u16_3_32],
        [decode_u16_4_8, decode_u16_4_16, decode_u16_4_24, decode_u16_4_32],
        [decode_u16_5_8, decode_u16_5_16, decode_u16_5_24, decode_u16_5_32],
        [decode_u16_6_8, decode_u16_6_16, decode_u16_6_24, decode_u16_6_32],
        [decode_u16_7_8, decode_u16_7_16, decode_u16_7_24, decode_u16_7_32],
        [decode_u16_8_8, decode_u16_8_16, decode_u16_8_24, decode_u16_8_32],
        [decode_u16_9_8, decode_u16_9_16, decode_u16_9_24, decode_u16_9_32],
        [decode_u16_10_8, decode_u16_10_16, decode_u16_10_24, decode_u16_10_32],
        [decode_u16_11_8, decode_u16_11_16, decode_u16_11_24, decode_u16_11_32],
        [decode_u16_12_8, decode_u16_12_16, decode_u16_12_24, decode_u16_12_32],
        [decode_u16_13_8, decode_u16_13_16, decode_u16_13_24, decode_u16_13_32],
        [decode_u16_14_8, decode_u16_14_16, decode_u16_14_24, decode_u16_14_32],
        [decode_u16_15_8, decode_u16_15_16, decode_u16_15_24, decode_u16_15_32],
        [decode_u16_16_8, decode_u16_16_16, decode_u16_16_24, decode_u16_16_32]];
unsafe fn encode_simd_u16_0(_: *const u16, _: *mut u32) { }
unsafe fn encode_simd_u16_1(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 8usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 0usize);
}
unsafe fn encode_simd_u16_2(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 16usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
}
unsafe fn encode_simd_u16_3(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 24usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 16usize);
}
unsafe fn encode_simd_u16_4(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 32usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
}
unsafe fn encode_simd_u16_5(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 40usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 32usize);
}
unsafe fn encode_simd_u16_6(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 48usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 40usize);
}
unsafe fn encode_simd_u16_7(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 56usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 48usize);
}
unsafe fn encode_simd_u16_8(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 64usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 56usize);
}
unsafe fn encode_simd_u16_9(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 72usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 64usize);
}
unsafe fn encode_simd_u16_10(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 80usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 72usize);
}
unsafe fn encode_simd_u16_11(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 88usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 80usize);
}
unsafe fn encode_simd_u16_12(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 96usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs.store(s_slice, 64usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 88usize);
}
unsafe fn encode_simd_u16_13(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 104usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 3usize;
    lhs.store(s_slice, 96usize);
}
unsafe fn encode_simd_u16_14(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 112usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 2usize;
    lhs.store(s_slice, 104usize);
}
unsafe fn encode_simd_u16_15(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 120usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs = lhs | rhs << 3usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs = lhs | rhs << 2usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs = lhs | rhs << 1usize;
    lhs.store(s_slice, 112usize);
}
unsafe fn encode_simd_u16_16(i_ptr: *const u16, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u16, 128usize);
    let rhs = simd::u16x8::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 8usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 16usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 24usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 32usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 40usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 48usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 56usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 64usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 72usize);
    lhs.store(s_slice, 64usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 80usize);
    lhs.store(s_slice, 72usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 88usize);
    lhs.store(s_slice, 80usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 96usize);
    lhs.store(s_slice, 88usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 104usize);
    lhs.store(s_slice, 96usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 112usize);
    lhs.store(s_slice, 104usize);
    lhs = rhs;
    let rhs = simd::u16x8::load(i_slice, 120usize);
    lhs.store(s_slice, 112usize);
    lhs = rhs;
    lhs.store(s_slice, 120usize);
}
pub const ENCODE_SIMD_U16: [unsafe fn(*const u16, *mut u32); 17usize] =
    [encode_simd_u16_0, encode_simd_u16_1, encode_simd_u16_2,
        encode_simd_u16_3, encode_simd_u16_4, encode_simd_u16_5,
        encode_simd_u16_6, encode_simd_u16_7, encode_simd_u16_8,
        encode_simd_u16_9, encode_simd_u16_10, encode_simd_u16_11,
        encode_simd_u16_12, encode_simd_u16_13, encode_simd_u16_14,
        encode_simd_u16_15, encode_simd_u16_16];
unsafe fn decode_simd_u16_0(_: *const u32, o_ptr: *mut u16) {
    ptr::write_bytes(o_ptr, 0u8, 128);
}
unsafe fn decode_simd_u16_1(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 8usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_2(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 16usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_3(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 24usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_4(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 32usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_5(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 40usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 11usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_6(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 48usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_7(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 56usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 9usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_8(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 64usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_9(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 72usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 7usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_10(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 80usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 6usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_11(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 88usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 5usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 80usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_12(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 96usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 4usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_13(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 104usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 3usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(s_slice, 88usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(s_slice, 96usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_14(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 112usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 2usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 80usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(s_slice, 96usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(s_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_15(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 120usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u16x8::splat(!0) >> 1usize;
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u16x8::load(s_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u16x8::load(s_slice, 88usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u16x8::load(s_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u16x8::load(s_slice, 104usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u16x8::load(s_slice, 112usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
}
unsafe fn decode_simd_u16_16(s_ptr: *const u32, o_ptr: *mut u16) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u16, 128usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let rhs = simd::u16x8::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs.store(o_slice, 0usize);
    let rhs = simd::u16x8::load(s_slice, 8usize);
    lhs = rhs;
    lhs.store(o_slice, 8usize);
    let rhs = simd::u16x8::load(s_slice, 16usize);
    lhs = rhs;
    lhs.store(o_slice, 16usize);
    let rhs = simd::u16x8::load(s_slice, 24usize);
    lhs = rhs;
    lhs.store(o_slice, 24usize);
    let rhs = simd::u16x8::load(s_slice, 32usize);
    lhs = rhs;
    lhs.store(o_slice, 32usize);
    let rhs = simd::u16x8::load(s_slice, 40usize);
    lhs = rhs;
    lhs.store(o_slice, 40usize);
    let rhs = simd::u16x8::load(s_slice, 48usize);
    lhs = rhs;
    lhs.store(o_slice, 48usize);
    let rhs = simd::u16x8::load(s_slice, 56usize);
    lhs = rhs;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u16x8::load(s_slice, 64usize);
    lhs = rhs;
    lhs.store(o_slice, 64usize);
    let rhs = simd::u16x8::load(s_slice, 72usize);
    lhs = rhs;
    lhs.store(o_slice, 72usize);
    let rhs = simd::u16x8::load(s_slice, 80usize);
    lhs = rhs;
    lhs.store(o_slice, 80usize);
    let rhs = simd::u16x8::load(s_slice, 88usize);
    lhs = rhs;
    lhs.store(o_slice, 88usize);
    let rhs = simd::u16x8::load(s_slice, 96usize);
    lhs = rhs;
    lhs.store(o_slice, 96usize);
    let rhs = simd::u16x8::load(s_slice, 104usize);
    lhs = rhs;
    lhs.store(o_slice, 104usize);
    let rhs = simd::u16x8::load(s_slice, 112usize);
    lhs = rhs;
    lhs.store(o_slice, 112usize);
    let rhs = simd::u16x8::load(s_slice, 120usize);
    lhs = rhs;
    lhs.store(o_slice, 120usize);
}
pub const DECODE_SIMD_U16: [unsafe fn(*const u32, *mut u16); 17usize] =
    [decode_simd_u16_0, decode_simd_u16_1, decode_simd_u16_2,
        decode_simd_u16_3, decode_simd_u16_4, decode_simd_u16_5,
        decode_simd_u16_6, decode_simd_u16_7, decode_simd_u16_8,
        decode_simd_u16_9, decode_simd_u16_10, decode_simd_u16_11,
        decode_simd_u16_12, decode_simd_u16_13, decode_simd_u16_14,
        decode_simd_u16_15, decode_simd_u16_16];
pub unsafe fn encode_delta_u16(i_ptr: *mut u16, length: usize) {
    let i_slice = slice::from_raw_parts_mut(i_ptr as *mut i16, length);
    let mut idx = length;
    for _ in 0..((idx - 1) / 8usize) {
        idx -= 8usize;
        let lhs =
            simd::i16x8::load(i_slice, idx) -
                simd::i16x8::load(i_slice, idx - 1);
        lhs.store(i_slice, idx);
    }
    for a in (1..(idx as isize)).rev() {
        let lwr = *i_ptr.offset(a - 1);
        *i_ptr.offset(a) = (*i_ptr.offset(a)).wrapping_sub(lwr);
    }
}
pub unsafe fn encode_zz_shift_u16(i_ptr: *mut u16, length: usize,
                                  shift: u16) {
    let i_ptr: *mut i16 = i_ptr as *mut i16;
    let shift: i16 = shift as i16;
    for a in 0..(length as isize) {
        let rhs = (*i_ptr.offset(a)).wrapping_sub(shift);
        *i_ptr.offset(a) = (rhs << 1) ^ (rhs >> 15usize);
    }
}