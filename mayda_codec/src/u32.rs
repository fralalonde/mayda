use std::simd;
use std::ptr;
use std::slice;

unsafe fn encode_u32_0_8(_: *const u32, _: *mut u32) { }
unsafe fn encode_u32_0_16(_: *const u32, _: *mut u32) { }
unsafe fn encode_u32_0_24(_: *const u32, _: *mut u32) { }
unsafe fn encode_u32_0_32(_: *const u32, _: *mut u32) { }
unsafe fn encode_u32_1_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u32_1_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u32_1_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
}
unsafe fn encode_u32_1_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
}
unsafe fn encode_u32_2_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u32_2_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
}
unsafe fn encode_u32_2_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u32_2_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
}
unsafe fn encode_u32_3_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
}
unsafe fn encode_u32_3_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u32_3_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u32_3_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
}
unsafe fn encode_u32_4_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u32_4_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u32_4_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u32_4_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u32_5_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u32_5_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u32_5_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
}
unsafe fn encode_u32_5_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
}
unsafe fn encode_u32_6_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u32_6_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
}
unsafe fn encode_u32_6_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u32_6_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
}
unsafe fn encode_u32_7_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
}
unsafe fn encode_u32_7_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u32_7_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u32_7_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
}
unsafe fn encode_u32_8_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u32_8_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u32_8_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u32_8_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u32_9_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_9_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u32_9_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u32_9_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
}
unsafe fn encode_u32_10_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u32_10_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
}
unsafe fn encode_u32_10_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u32_10_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
}
unsafe fn encode_u32_11_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u32_11_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u32_11_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_11_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
}
unsafe fn encode_u32_12_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u32_12_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u32_12_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u32_12_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u32_13_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_13_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u32_13_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u32_13_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
}
unsafe fn encode_u32_14_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u32_14_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
}
unsafe fn encode_u32_14_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u32_14_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
}
unsafe fn encode_u32_15_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u32_15_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u32_15_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_15_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
}
unsafe fn encode_u32_16_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u32_16_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u32_16_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u32_16_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u32_17_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_17_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_17_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u32_17_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u32_18_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_18_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u32_18_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_18_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u32_19_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u32_19_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_19_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_19_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u32_20_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u32_20_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u32_20_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u32_20_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u32_21_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_21_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_21_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u32_21_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u32_22_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_22_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u32_22_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_22_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u32_23_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u32_23_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_23_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_23_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u32_24_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u32_24_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u32_24_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u32_24_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u32_25_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_25_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_25_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_25_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u32_26_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_26_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u32_26_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_26_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u32_27_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_27_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_27_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_27_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u32_28_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u32_28_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u32_28_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u32_28_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u32_29_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_29_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_29_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_29_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u32_30_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_30_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u32_30_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_30_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u32_31_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_31_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_31_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_31_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u32_32_8(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_32_16(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_32_24(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u32_32_32(mut i_ptr: *const u32, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
pub const ENCODE_U32: [[unsafe fn(*const u32, *mut u32); 4usize]; 33usize] =
    [[encode_u32_0_8, encode_u32_0_16, encode_u32_0_24, encode_u32_0_32],
        [encode_u32_1_8, encode_u32_1_16, encode_u32_1_24, encode_u32_1_32],
        [encode_u32_2_8, encode_u32_2_16, encode_u32_2_24, encode_u32_2_32],
        [encode_u32_3_8, encode_u32_3_16, encode_u32_3_24, encode_u32_3_32],
        [encode_u32_4_8, encode_u32_4_16, encode_u32_4_24, encode_u32_4_32],
        [encode_u32_5_8, encode_u32_5_16, encode_u32_5_24, encode_u32_5_32],
        [encode_u32_6_8, encode_u32_6_16, encode_u32_6_24, encode_u32_6_32],
        [encode_u32_7_8, encode_u32_7_16, encode_u32_7_24, encode_u32_7_32],
        [encode_u32_8_8, encode_u32_8_16, encode_u32_8_24, encode_u32_8_32],
        [encode_u32_9_8, encode_u32_9_16, encode_u32_9_24, encode_u32_9_32],
        [encode_u32_10_8, encode_u32_10_16, encode_u32_10_24, encode_u32_10_32],
        [encode_u32_11_8, encode_u32_11_16, encode_u32_11_24, encode_u32_11_32],
        [encode_u32_12_8, encode_u32_12_16, encode_u32_12_24, encode_u32_12_32],
        [encode_u32_13_8, encode_u32_13_16, encode_u32_13_24, encode_u32_13_32],
        [encode_u32_14_8, encode_u32_14_16, encode_u32_14_24, encode_u32_14_32],
        [encode_u32_15_8, encode_u32_15_16, encode_u32_15_24, encode_u32_15_32],
        [encode_u32_16_8, encode_u32_16_16, encode_u32_16_24, encode_u32_16_32],
        [encode_u32_17_8, encode_u32_17_16, encode_u32_17_24, encode_u32_17_32],
        [encode_u32_18_8, encode_u32_18_16, encode_u32_18_24, encode_u32_18_32],
        [encode_u32_19_8, encode_u32_19_16, encode_u32_19_24, encode_u32_19_32],
        [encode_u32_20_8, encode_u32_20_16, encode_u32_20_24, encode_u32_20_32],
        [encode_u32_21_8, encode_u32_21_16, encode_u32_21_24, encode_u32_21_32],
        [encode_u32_22_8, encode_u32_22_16, encode_u32_22_24, encode_u32_22_32],
        [encode_u32_23_8, encode_u32_23_16, encode_u32_23_24, encode_u32_23_32],
        [encode_u32_24_8, encode_u32_24_16, encode_u32_24_24, encode_u32_24_32],
        [encode_u32_25_8, encode_u32_25_16, encode_u32_25_24, encode_u32_25_32],
        [encode_u32_26_8, encode_u32_26_16, encode_u32_26_24, encode_u32_26_32],
        [encode_u32_27_8, encode_u32_27_16, encode_u32_27_24, encode_u32_27_32],
        [encode_u32_28_8, encode_u32_28_16, encode_u32_28_24, encode_u32_28_32],
        [encode_u32_29_8, encode_u32_29_16, encode_u32_29_24, encode_u32_29_32],
        [encode_u32_30_8, encode_u32_30_16, encode_u32_30_24, encode_u32_30_32],
        [encode_u32_31_8, encode_u32_31_16, encode_u32_31_24, encode_u32_31_32],
        [encode_u32_32_8, encode_u32_32_16, encode_u32_32_24, encode_u32_32_32]];
unsafe fn decode_u32_0_8(_: *const u32, o_ptr: *mut u32) {
    ptr::write_bytes(o_ptr, 0u8, 8usize);
}
unsafe fn decode_u32_0_16(_: *const u32, o_ptr: *mut u32) {
    ptr::write_bytes(o_ptr, 0u8, 16usize);
}
unsafe fn decode_u32_0_24(_: *const u32, o_ptr: *mut u32) {
    ptr::write_bytes(o_ptr, 0u8, 24usize);
}
unsafe fn decode_u32_0_32(_: *const u32, o_ptr: *mut u32) {
    ptr::write_bytes(o_ptr, 0u8, 32usize);
}
unsafe fn decode_u32_1_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_1_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_1_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_1_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_2_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_2_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_2_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_2_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_3_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_3_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_3_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_3_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_4_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_4_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_4_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_4_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_5_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_5_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_5_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_5_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_6_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_6_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_6_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_6_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_7_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_7_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_7_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_7_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_8_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_8_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_8_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_8_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_9_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_9_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_9_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_9_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_10_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_10_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_10_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_10_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_11_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_11_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_11_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_11_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_12_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_12_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_12_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_12_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_13_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_13_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_13_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_13_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_14_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_14_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_14_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_14_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_15_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_15_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_15_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_15_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_16_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_16_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_16_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_16_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_17_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_17_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_17_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_17_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_18_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_18_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_18_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_18_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_19_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_19_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_19_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_19_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_20_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_20_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_20_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_20_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_21_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_21_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_21_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_21_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_22_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_22_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_22_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_22_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_23_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_23_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_23_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_23_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_24_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_24_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_24_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_24_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_25_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_25_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_25_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_25_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_26_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_26_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_26_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_26_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_27_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_27_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_27_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_27_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_28_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_28_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_28_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_28_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_29_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_29_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_29_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_29_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_30_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_30_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_30_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_30_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_31_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_31_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_31_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_31_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mask: u32 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u32;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u32) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u32;
    *o_ptr = out & mask;
}
unsafe fn decode_u32_32_8(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
}
unsafe fn decode_u32_32_16(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
}
unsafe fn decode_u32_32_24(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
}
unsafe fn decode_u32_32_32(mut s_ptr: *const u32, mut o_ptr: *mut u32) {
    let mut out;
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u32;
    *o_ptr = out;
}
pub const DECODE_U32: [[unsafe fn(*const u32, *mut u32); 4usize]; 33usize] =
    [[decode_u32_0_8, decode_u32_0_16, decode_u32_0_24, decode_u32_0_32],
        [decode_u32_1_8, decode_u32_1_16, decode_u32_1_24, decode_u32_1_32],
        [decode_u32_2_8, decode_u32_2_16, decode_u32_2_24, decode_u32_2_32],
        [decode_u32_3_8, decode_u32_3_16, decode_u32_3_24, decode_u32_3_32],
        [decode_u32_4_8, decode_u32_4_16, decode_u32_4_24, decode_u32_4_32],
        [decode_u32_5_8, decode_u32_5_16, decode_u32_5_24, decode_u32_5_32],
        [decode_u32_6_8, decode_u32_6_16, decode_u32_6_24, decode_u32_6_32],
        [decode_u32_7_8, decode_u32_7_16, decode_u32_7_24, decode_u32_7_32],
        [decode_u32_8_8, decode_u32_8_16, decode_u32_8_24, decode_u32_8_32],
        [decode_u32_9_8, decode_u32_9_16, decode_u32_9_24, decode_u32_9_32],
        [decode_u32_10_8, decode_u32_10_16, decode_u32_10_24, decode_u32_10_32],
        [decode_u32_11_8, decode_u32_11_16, decode_u32_11_24, decode_u32_11_32],
        [decode_u32_12_8, decode_u32_12_16, decode_u32_12_24, decode_u32_12_32],
        [decode_u32_13_8, decode_u32_13_16, decode_u32_13_24, decode_u32_13_32],
        [decode_u32_14_8, decode_u32_14_16, decode_u32_14_24, decode_u32_14_32],
        [decode_u32_15_8, decode_u32_15_16, decode_u32_15_24, decode_u32_15_32],
        [decode_u32_16_8, decode_u32_16_16, decode_u32_16_24, decode_u32_16_32],
        [decode_u32_17_8, decode_u32_17_16, decode_u32_17_24, decode_u32_17_32],
        [decode_u32_18_8, decode_u32_18_16, decode_u32_18_24, decode_u32_18_32],
        [decode_u32_19_8, decode_u32_19_16, decode_u32_19_24, decode_u32_19_32],
        [decode_u32_20_8, decode_u32_20_16, decode_u32_20_24, decode_u32_20_32],
        [decode_u32_21_8, decode_u32_21_16, decode_u32_21_24, decode_u32_21_32],
        [decode_u32_22_8, decode_u32_22_16, decode_u32_22_24, decode_u32_22_32],
        [decode_u32_23_8, decode_u32_23_16, decode_u32_23_24, decode_u32_23_32],
        [decode_u32_24_8, decode_u32_24_16, decode_u32_24_24, decode_u32_24_32],
        [decode_u32_25_8, decode_u32_25_16, decode_u32_25_24, decode_u32_25_32],
        [decode_u32_26_8, decode_u32_26_16, decode_u32_26_24, decode_u32_26_32],
        [decode_u32_27_8, decode_u32_27_16, decode_u32_27_24, decode_u32_27_32],
        [decode_u32_28_8, decode_u32_28_16, decode_u32_28_24, decode_u32_28_32],
        [decode_u32_29_8, decode_u32_29_16, decode_u32_29_24, decode_u32_29_32],
        [decode_u32_30_8, decode_u32_30_16, decode_u32_30_24, decode_u32_30_32],
        [decode_u32_31_8, decode_u32_31_16, decode_u32_31_24, decode_u32_31_32],
        [decode_u32_32_8, decode_u32_32_16, decode_u32_32_24, decode_u32_32_32]];
unsafe fn encode_simd_u32_0(_: *const u32, _: *mut u32) { }
unsafe fn encode_simd_u32_1(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 4usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 0usize);
}
unsafe fn encode_simd_u32_2(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 8usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 4usize);
}
unsafe fn encode_simd_u32_3(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 12usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 8usize);
}
unsafe fn encode_simd_u32_4(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 16usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 12usize);
}
unsafe fn encode_simd_u32_5(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 20usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 16usize);
}
unsafe fn encode_simd_u32_6(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 24usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 20usize);
}
unsafe fn encode_simd_u32_7(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 28usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 24usize);
}
unsafe fn encode_simd_u32_8(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 32usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 28usize);
}
unsafe fn encode_simd_u32_9(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 36usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 32usize);
}
unsafe fn encode_simd_u32_10(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 40usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 36usize);
}
unsafe fn encode_simd_u32_11(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 44usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 40usize);
}
unsafe fn encode_simd_u32_12(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 48usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 44usize);
}
unsafe fn encode_simd_u32_13(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 52usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 48usize);
}
unsafe fn encode_simd_u32_14(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 56usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 52usize);
}
unsafe fn encode_simd_u32_15(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 60usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 56usize);
}
unsafe fn encode_simd_u32_16(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 64usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs.store(s_slice, 36usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 44usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 60usize);
}
unsafe fn encode_simd_u32_17(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 68usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 64usize);
}
unsafe fn encode_simd_u32_18(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 72usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 68usize);
}
unsafe fn encode_simd_u32_19(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 76usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 72usize);
}
unsafe fn encode_simd_u32_20(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 80usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 36usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 76usize);
}
unsafe fn encode_simd_u32_21(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 84usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 80usize);
}
unsafe fn encode_simd_u32_22(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 88usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 84usize);
}
unsafe fn encode_simd_u32_23(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 92usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 88usize);
}
unsafe fn encode_simd_u32_24(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 96usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 44usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 68usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs.store(s_slice, 80usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 92usize);
}
unsafe fn encode_simd_u32_25(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 100usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 96usize);
}
unsafe fn encode_simd_u32_26(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 104usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 100usize);
}
unsafe fn encode_simd_u32_27(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 108usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 104usize);
}
unsafe fn encode_simd_u32_28(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 112usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 80usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 108usize);
}
unsafe fn encode_simd_u32_29(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 116usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 3usize;
    lhs.store(s_slice, 112usize);
}
unsafe fn encode_simd_u32_30(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 120usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 2usize;
    lhs.store(s_slice, 116usize);
}
unsafe fn encode_simd_u32_31(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 124usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs = lhs | rhs << 3usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs = lhs | rhs << 2usize;
    lhs.store(s_slice, 116usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs = lhs | rhs << 1usize;
    lhs.store(s_slice, 120usize);
}
unsafe fn encode_simd_u32_32(i_ptr: *const u32, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u32, 128usize);
    let rhs = simd::u32x4::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 4usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 8usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 12usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 16usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 20usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 24usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 28usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 32usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 36usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 40usize);
    lhs.store(s_slice, 36usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 44usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 48usize);
    lhs.store(s_slice, 44usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 52usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 56usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 60usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 64usize);
    lhs.store(s_slice, 60usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 68usize);
    lhs.store(s_slice, 64usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 72usize);
    lhs.store(s_slice, 68usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 76usize);
    lhs.store(s_slice, 72usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 80usize);
    lhs.store(s_slice, 76usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 84usize);
    lhs.store(s_slice, 80usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 88usize);
    lhs.store(s_slice, 84usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 92usize);
    lhs.store(s_slice, 88usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 96usize);
    lhs.store(s_slice, 92usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 100usize);
    lhs.store(s_slice, 96usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 104usize);
    lhs.store(s_slice, 100usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 108usize);
    lhs.store(s_slice, 104usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 112usize);
    lhs.store(s_slice, 108usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 116usize);
    lhs.store(s_slice, 112usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 120usize);
    lhs.store(s_slice, 116usize);
    lhs = rhs;
    let rhs = simd::u32x4::load(i_slice, 124usize);
    lhs.store(s_slice, 120usize);
    lhs = rhs;
    lhs.store(s_slice, 124usize);
}
pub const ENCODE_SIMD_U32: [unsafe fn(*const u32, *mut u32); 33usize] =
    [encode_simd_u32_0, encode_simd_u32_1, encode_simd_u32_2,
        encode_simd_u32_3, encode_simd_u32_4, encode_simd_u32_5,
        encode_simd_u32_6, encode_simd_u32_7, encode_simd_u32_8,
        encode_simd_u32_9, encode_simd_u32_10, encode_simd_u32_11,
        encode_simd_u32_12, encode_simd_u32_13, encode_simd_u32_14,
        encode_simd_u32_15, encode_simd_u32_16, encode_simd_u32_17,
        encode_simd_u32_18, encode_simd_u32_19, encode_simd_u32_20,
        encode_simd_u32_21, encode_simd_u32_22, encode_simd_u32_23,
        encode_simd_u32_24, encode_simd_u32_25, encode_simd_u32_26,
        encode_simd_u32_27, encode_simd_u32_28, encode_simd_u32_29,
        encode_simd_u32_30, encode_simd_u32_31, encode_simd_u32_32];
unsafe fn decode_simd_u32_0(_: *const u32, o_ptr: *mut u32) {
    ptr::write_bytes(o_ptr, 0u8, 128);
}
unsafe fn decode_simd_u32_1(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 4usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_2(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 8usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_3(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 12usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_4(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 16usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_5(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 20usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_6(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 24usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_7(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 28usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_8(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 32usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_9(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 36usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_10(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 40usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_11(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 44usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_12(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 48usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_13(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 52usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_14(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 56usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_15(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 60usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_16(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 64usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_17(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 68usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_18(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 72usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_19(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 76usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_20(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 80usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_21(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 84usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 11usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_22(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 88usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_23(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 92usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 9usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_24(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 96usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_25(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 100usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 7usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_26(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 104usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 6usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_27(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 108usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 5usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 104usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_28(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 112usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 4usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 108usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_29(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 116usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 3usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(s_slice, 108usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(s_slice, 112usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_30(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 120usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 2usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 104usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 108usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(s_slice, 112usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(s_slice, 116usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_31(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 124usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u32x4::splat(!0) >> 1usize;
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u32x4::load(s_slice, 104usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u32x4::load(s_slice, 108usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u32x4::load(s_slice, 112usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u32x4::load(s_slice, 116usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u32x4::load(s_slice, 120usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
}
unsafe fn decode_simd_u32_32(s_ptr: *const u32, o_ptr: *mut u32) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u32, 128usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let rhs = simd::u32x4::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs.store(o_slice, 0usize);
    let rhs = simd::u32x4::load(s_slice, 4usize);
    lhs = rhs;
    lhs.store(o_slice, 4usize);
    let rhs = simd::u32x4::load(s_slice, 8usize);
    lhs = rhs;
    lhs.store(o_slice, 8usize);
    let rhs = simd::u32x4::load(s_slice, 12usize);
    lhs = rhs;
    lhs.store(o_slice, 12usize);
    let rhs = simd::u32x4::load(s_slice, 16usize);
    lhs = rhs;
    lhs.store(o_slice, 16usize);
    let rhs = simd::u32x4::load(s_slice, 20usize);
    lhs = rhs;
    lhs.store(o_slice, 20usize);
    let rhs = simd::u32x4::load(s_slice, 24usize);
    lhs = rhs;
    lhs.store(o_slice, 24usize);
    let rhs = simd::u32x4::load(s_slice, 28usize);
    lhs = rhs;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u32x4::load(s_slice, 32usize);
    lhs = rhs;
    lhs.store(o_slice, 32usize);
    let rhs = simd::u32x4::load(s_slice, 36usize);
    lhs = rhs;
    lhs.store(o_slice, 36usize);
    let rhs = simd::u32x4::load(s_slice, 40usize);
    lhs = rhs;
    lhs.store(o_slice, 40usize);
    let rhs = simd::u32x4::load(s_slice, 44usize);
    lhs = rhs;
    lhs.store(o_slice, 44usize);
    let rhs = simd::u32x4::load(s_slice, 48usize);
    lhs = rhs;
    lhs.store(o_slice, 48usize);
    let rhs = simd::u32x4::load(s_slice, 52usize);
    lhs = rhs;
    lhs.store(o_slice, 52usize);
    let rhs = simd::u32x4::load(s_slice, 56usize);
    lhs = rhs;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u32x4::load(s_slice, 60usize);
    lhs = rhs;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u32x4::load(s_slice, 64usize);
    lhs = rhs;
    lhs.store(o_slice, 64usize);
    let rhs = simd::u32x4::load(s_slice, 68usize);
    lhs = rhs;
    lhs.store(o_slice, 68usize);
    let rhs = simd::u32x4::load(s_slice, 72usize);
    lhs = rhs;
    lhs.store(o_slice, 72usize);
    let rhs = simd::u32x4::load(s_slice, 76usize);
    lhs = rhs;
    lhs.store(o_slice, 76usize);
    let rhs = simd::u32x4::load(s_slice, 80usize);
    lhs = rhs;
    lhs.store(o_slice, 80usize);
    let rhs = simd::u32x4::load(s_slice, 84usize);
    lhs = rhs;
    lhs.store(o_slice, 84usize);
    let rhs = simd::u32x4::load(s_slice, 88usize);
    lhs = rhs;
    lhs.store(o_slice, 88usize);
    let rhs = simd::u32x4::load(s_slice, 92usize);
    lhs = rhs;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u32x4::load(s_slice, 96usize);
    lhs = rhs;
    lhs.store(o_slice, 96usize);
    let rhs = simd::u32x4::load(s_slice, 100usize);
    lhs = rhs;
    lhs.store(o_slice, 100usize);
    let rhs = simd::u32x4::load(s_slice, 104usize);
    lhs = rhs;
    lhs.store(o_slice, 104usize);
    let rhs = simd::u32x4::load(s_slice, 108usize);
    lhs = rhs;
    lhs.store(o_slice, 108usize);
    let rhs = simd::u32x4::load(s_slice, 112usize);
    lhs = rhs;
    lhs.store(o_slice, 112usize);
    let rhs = simd::u32x4::load(s_slice, 116usize);
    lhs = rhs;
    lhs.store(o_slice, 116usize);
    let rhs = simd::u32x4::load(s_slice, 120usize);
    lhs = rhs;
    lhs.store(o_slice, 120usize);
    let rhs = simd::u32x4::load(s_slice, 124usize);
    lhs = rhs;
    lhs.store(o_slice, 124usize);
}
pub const DECODE_SIMD_U32: [unsafe fn(*const u32, *mut u32); 33usize] =
    [decode_simd_u32_0, decode_simd_u32_1, decode_simd_u32_2,
        decode_simd_u32_3, decode_simd_u32_4, decode_simd_u32_5,
        decode_simd_u32_6, decode_simd_u32_7, decode_simd_u32_8,
        decode_simd_u32_9, decode_simd_u32_10, decode_simd_u32_11,
        decode_simd_u32_12, decode_simd_u32_13, decode_simd_u32_14,
        decode_simd_u32_15, decode_simd_u32_16, decode_simd_u32_17,
        decode_simd_u32_18, decode_simd_u32_19, decode_simd_u32_20,
        decode_simd_u32_21, decode_simd_u32_22, decode_simd_u32_23,
        decode_simd_u32_24, decode_simd_u32_25, decode_simd_u32_26,
        decode_simd_u32_27, decode_simd_u32_28, decode_simd_u32_29,
        decode_simd_u32_30, decode_simd_u32_31, decode_simd_u32_32];
pub unsafe fn encode_delta_u32(i_ptr: *mut u32, length: usize) {
    let i_slice = slice::from_raw_parts_mut(i_ptr as *mut i32, length);
    let mut idx = length;
    for _ in 0..((idx - 1) / 4usize) {
        idx -= 4usize;
        let lhs =
            simd::i32x4::load(i_slice, idx) -
                simd::i32x4::load(i_slice, idx - 1);
        lhs.store(i_slice, idx);
    }
    for a in (1..(idx as isize)).rev() {
        let lwr = *i_ptr.offset(a - 1);
        *i_ptr.offset(a) = (*i_ptr.offset(a)).wrapping_sub(lwr);
    }
}
pub unsafe fn encode_zz_shift_u32(i_ptr: *mut u32, length: usize,
                                  shift: u32) {
    let i_ptr: *mut i32 = i_ptr as *mut i32;
    let shift: i32 = shift as i32;
    for a in 0..(length as isize) {
        let rhs = (*i_ptr.offset(a)).wrapping_sub(shift);
        *i_ptr.offset(a) = (rhs << 1) ^ (rhs >> 31usize);
    }
}
