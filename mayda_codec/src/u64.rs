use std::simd;
use std::ptr;
use std::slice;

unsafe fn encode_u64_0_8(_: *const u64, _: *mut u32) { }
unsafe fn encode_u64_0_16(_: *const u64, _: *mut u32) { }
unsafe fn encode_u64_0_24(_: *const u64, _: *mut u32) { }
unsafe fn encode_u64_0_32(_: *const u64, _: *mut u32) { }
unsafe fn encode_u64_1_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u64_1_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u64_1_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
}
unsafe fn encode_u64_1_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
}
unsafe fn encode_u64_2_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u64_2_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
}
unsafe fn encode_u64_2_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u64_2_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
}
unsafe fn encode_u64_3_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
}
unsafe fn encode_u64_3_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u64_3_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u64_3_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
}
unsafe fn encode_u64_4_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u64_4_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u64_4_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u64_4_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
}
unsafe fn encode_u64_5_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u64_5_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u64_5_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
}
unsafe fn encode_u64_5_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
}
unsafe fn encode_u64_6_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u64_6_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
}
unsafe fn encode_u64_6_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u64_6_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
}
unsafe fn encode_u64_7_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
}
unsafe fn encode_u64_7_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u64_7_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u64_7_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
}
unsafe fn encode_u64_8_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u64_8_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u64_8_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u64_8_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
}
unsafe fn encode_u64_9_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_9_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u64_9_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u64_9_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
}
unsafe fn encode_u64_10_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u64_10_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
}
unsafe fn encode_u64_10_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u64_10_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
}
unsafe fn encode_u64_11_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u64_11_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u64_11_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_11_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
}
unsafe fn encode_u64_12_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u64_12_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u64_12_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u64_12_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
}
unsafe fn encode_u64_13_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_13_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u64_13_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u64_13_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
}
unsafe fn encode_u64_14_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u64_14_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
}
unsafe fn encode_u64_14_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u64_14_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
}
unsafe fn encode_u64_15_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u64_15_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u64_15_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_15_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
}
unsafe fn encode_u64_16_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u64_16_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u64_16_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u64_16_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
}
unsafe fn encode_u64_17_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_17_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_17_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u64_17_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
}
unsafe fn encode_u64_18_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_18_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u64_18_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_18_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
}
unsafe fn encode_u64_19_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u64_19_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_19_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_19_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
}
unsafe fn encode_u64_20_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u64_20_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u64_20_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u64_20_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
}
unsafe fn encode_u64_21_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_21_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_21_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u64_21_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
}
unsafe fn encode_u64_22_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_22_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u64_22_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_22_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
}
unsafe fn encode_u64_23_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u64_23_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_23_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_23_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
}
unsafe fn encode_u64_24_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u64_24_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u64_24_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u64_24_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
}
unsafe fn encode_u64_25_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_25_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_25_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_25_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
}
unsafe fn encode_u64_26_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_26_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u64_26_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_26_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
}
unsafe fn encode_u64_27_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_27_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_27_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_27_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
}
unsafe fn encode_u64_28_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u64_28_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u64_28_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u64_28_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
}
unsafe fn encode_u64_29_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_29_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_29_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_29_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
}
unsafe fn encode_u64_30_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_30_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u64_30_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_30_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
}
unsafe fn encode_u64_31_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_31_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_31_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_31_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
}
unsafe fn encode_u64_32_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_32_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_32_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_32_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_33_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_33_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_33_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_33_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_34_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_34_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_34_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_34_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_35_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_35_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_35_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_35_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_36_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_36_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_36_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_36_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_37_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_37_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_37_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_37_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_38_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_38_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_38_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_38_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_39_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_39_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_39_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_39_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_40_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_40_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_40_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_40_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_41_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_41_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_41_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_41_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_42_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_42_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_42_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_42_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_43_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_43_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_43_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_43_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_44_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_44_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_44_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_44_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_45_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_45_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_45_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_45_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_46_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_46_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_46_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_46_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_47_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_47_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_47_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_47_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_48_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_48_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_48_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_48_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_49_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_49_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_49_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_49_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_50_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_50_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_50_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_50_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_51_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_51_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_51_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_51_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_52_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_52_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_52_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_52_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_53_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_53_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_53_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_53_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_54_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_54_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_54_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_54_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_55_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_55_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_55_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_55_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_56_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_56_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_56_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_56_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_57_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_57_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_57_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_57_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_58_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_58_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_58_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_58_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_59_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_59_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_59_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_59_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_60_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_60_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_60_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_60_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_61_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_61_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 59usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_61_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 59usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_61_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 59usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_62_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_62_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_62_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_62_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_63_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_63_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_63_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_63_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 31usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 1usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 33usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 30usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 2usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 34usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 29usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 3usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 35usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 28usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 4usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 36usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 27usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 5usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 37usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 26usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 6usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 38usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 25usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 7usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 39usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 24usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 8usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 40usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 23usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 9usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 41usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 22usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 10usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 42usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 21usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 11usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 43usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 20usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 12usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 44usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 19usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 13usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 45usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 18usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 14usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 46usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 17usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 15usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 47usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 16usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 16usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 48usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 15usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 17usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 49usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 14usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 18usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 50usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 13usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 19usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 51usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 12usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 20usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 52usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 11usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 21usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 53usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 10usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 22usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 54usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 9usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 23usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 55usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 8usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 24usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 56usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 7usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 25usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 57usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 6usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 26usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 58usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 5usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 27usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 59usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 4usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 28usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 60usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 3usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 29usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 61usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 2usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 30usize) as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 62usize) as u32;
    i_ptr = i_ptr.offset(1);
    out |= (*i_ptr as u32) << 1usize;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 31usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_64_8(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_64_16(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_64_24(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    *s_ptr = out;
}
unsafe fn encode_u64_64_32(mut i_ptr: *const u64, mut s_ptr: *mut u32) {
    let mut out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    i_ptr = i_ptr.offset(1);
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = *i_ptr as u32;
    *s_ptr = out;
    s_ptr = s_ptr.offset(1);
    out = (*i_ptr >> 32usize) as u32;
    *s_ptr = out;
}
pub const ENCODE_U64: [[unsafe fn(*const u64, *mut u32); 4usize]; 65usize] =
    [[encode_u64_0_8, encode_u64_0_16, encode_u64_0_24, encode_u64_0_32],
        [encode_u64_1_8, encode_u64_1_16, encode_u64_1_24, encode_u64_1_32],
        [encode_u64_2_8, encode_u64_2_16, encode_u64_2_24, encode_u64_2_32],
        [encode_u64_3_8, encode_u64_3_16, encode_u64_3_24, encode_u64_3_32],
        [encode_u64_4_8, encode_u64_4_16, encode_u64_4_24, encode_u64_4_32],
        [encode_u64_5_8, encode_u64_5_16, encode_u64_5_24, encode_u64_5_32],
        [encode_u64_6_8, encode_u64_6_16, encode_u64_6_24, encode_u64_6_32],
        [encode_u64_7_8, encode_u64_7_16, encode_u64_7_24, encode_u64_7_32],
        [encode_u64_8_8, encode_u64_8_16, encode_u64_8_24, encode_u64_8_32],
        [encode_u64_9_8, encode_u64_9_16, encode_u64_9_24, encode_u64_9_32],
        [encode_u64_10_8, encode_u64_10_16, encode_u64_10_24, encode_u64_10_32],
        [encode_u64_11_8, encode_u64_11_16, encode_u64_11_24, encode_u64_11_32],
        [encode_u64_12_8, encode_u64_12_16, encode_u64_12_24, encode_u64_12_32],
        [encode_u64_13_8, encode_u64_13_16, encode_u64_13_24, encode_u64_13_32],
        [encode_u64_14_8, encode_u64_14_16, encode_u64_14_24, encode_u64_14_32],
        [encode_u64_15_8, encode_u64_15_16, encode_u64_15_24, encode_u64_15_32],
        [encode_u64_16_8, encode_u64_16_16, encode_u64_16_24, encode_u64_16_32],
        [encode_u64_17_8, encode_u64_17_16, encode_u64_17_24, encode_u64_17_32],
        [encode_u64_18_8, encode_u64_18_16, encode_u64_18_24, encode_u64_18_32],
        [encode_u64_19_8, encode_u64_19_16, encode_u64_19_24, encode_u64_19_32],
        [encode_u64_20_8, encode_u64_20_16, encode_u64_20_24, encode_u64_20_32],
        [encode_u64_21_8, encode_u64_21_16, encode_u64_21_24, encode_u64_21_32],
        [encode_u64_22_8, encode_u64_22_16, encode_u64_22_24, encode_u64_22_32],
        [encode_u64_23_8, encode_u64_23_16, encode_u64_23_24, encode_u64_23_32],
        [encode_u64_24_8, encode_u64_24_16, encode_u64_24_24, encode_u64_24_32],
        [encode_u64_25_8, encode_u64_25_16, encode_u64_25_24, encode_u64_25_32],
        [encode_u64_26_8, encode_u64_26_16, encode_u64_26_24, encode_u64_26_32],
        [encode_u64_27_8, encode_u64_27_16, encode_u64_27_24, encode_u64_27_32],
        [encode_u64_28_8, encode_u64_28_16, encode_u64_28_24, encode_u64_28_32],
        [encode_u64_29_8, encode_u64_29_16, encode_u64_29_24, encode_u64_29_32],
        [encode_u64_30_8, encode_u64_30_16, encode_u64_30_24, encode_u64_30_32],
        [encode_u64_31_8, encode_u64_31_16, encode_u64_31_24, encode_u64_31_32],
        [encode_u64_32_8, encode_u64_32_16, encode_u64_32_24, encode_u64_32_32],
        [encode_u64_33_8, encode_u64_33_16, encode_u64_33_24, encode_u64_33_32],
        [encode_u64_34_8, encode_u64_34_16, encode_u64_34_24, encode_u64_34_32],
        [encode_u64_35_8, encode_u64_35_16, encode_u64_35_24, encode_u64_35_32],
        [encode_u64_36_8, encode_u64_36_16, encode_u64_36_24, encode_u64_36_32],
        [encode_u64_37_8, encode_u64_37_16, encode_u64_37_24, encode_u64_37_32],
        [encode_u64_38_8, encode_u64_38_16, encode_u64_38_24, encode_u64_38_32],
        [encode_u64_39_8, encode_u64_39_16, encode_u64_39_24, encode_u64_39_32],
        [encode_u64_40_8, encode_u64_40_16, encode_u64_40_24, encode_u64_40_32],
        [encode_u64_41_8, encode_u64_41_16, encode_u64_41_24, encode_u64_41_32],
        [encode_u64_42_8, encode_u64_42_16, encode_u64_42_24, encode_u64_42_32],
        [encode_u64_43_8, encode_u64_43_16, encode_u64_43_24, encode_u64_43_32],
        [encode_u64_44_8, encode_u64_44_16, encode_u64_44_24, encode_u64_44_32],
        [encode_u64_45_8, encode_u64_45_16, encode_u64_45_24, encode_u64_45_32],
        [encode_u64_46_8, encode_u64_46_16, encode_u64_46_24, encode_u64_46_32],
        [encode_u64_47_8, encode_u64_47_16, encode_u64_47_24, encode_u64_47_32],
        [encode_u64_48_8, encode_u64_48_16, encode_u64_48_24, encode_u64_48_32],
        [encode_u64_49_8, encode_u64_49_16, encode_u64_49_24, encode_u64_49_32],
        [encode_u64_50_8, encode_u64_50_16, encode_u64_50_24, encode_u64_50_32],
        [encode_u64_51_8, encode_u64_51_16, encode_u64_51_24, encode_u64_51_32],
        [encode_u64_52_8, encode_u64_52_16, encode_u64_52_24, encode_u64_52_32],
        [encode_u64_53_8, encode_u64_53_16, encode_u64_53_24, encode_u64_53_32],
        [encode_u64_54_8, encode_u64_54_16, encode_u64_54_24, encode_u64_54_32],
        [encode_u64_55_8, encode_u64_55_16, encode_u64_55_24, encode_u64_55_32],
        [encode_u64_56_8, encode_u64_56_16, encode_u64_56_24, encode_u64_56_32],
        [encode_u64_57_8, encode_u64_57_16, encode_u64_57_24, encode_u64_57_32],
        [encode_u64_58_8, encode_u64_58_16, encode_u64_58_24, encode_u64_58_32],
        [encode_u64_59_8, encode_u64_59_16, encode_u64_59_24, encode_u64_59_32],
        [encode_u64_60_8, encode_u64_60_16, encode_u64_60_24, encode_u64_60_32],
        [encode_u64_61_8, encode_u64_61_16, encode_u64_61_24, encode_u64_61_32],
        [encode_u64_62_8, encode_u64_62_16, encode_u64_62_24, encode_u64_62_32],
        [encode_u64_63_8, encode_u64_63_16, encode_u64_63_24, encode_u64_63_32],
        [encode_u64_64_8, encode_u64_64_16, encode_u64_64_24, encode_u64_64_32]];
unsafe fn decode_u64_0_8(_: *const u32, o_ptr: *mut u64) {
    ptr::write_bytes(o_ptr, 0u8, 8usize);
}
unsafe fn decode_u64_0_16(_: *const u32, o_ptr: *mut u64) {
    ptr::write_bytes(o_ptr, 0u8, 16usize);
}
unsafe fn decode_u64_0_24(_: *const u32, o_ptr: *mut u64) {
    ptr::write_bytes(o_ptr, 0u8, 24usize);
}
unsafe fn decode_u64_0_32(_: *const u32, o_ptr: *mut u64) {
    ptr::write_bytes(o_ptr, 0u8, 32usize);
}
unsafe fn decode_u64_1_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 63usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_1_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 63usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_1_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 63usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_1_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 63usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_2_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 62usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_2_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 62usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_2_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 62usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_2_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 62usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_3_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 61usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_3_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 61usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_3_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 61usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_3_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 61usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_4_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 60usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_4_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 60usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_4_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 60usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_4_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 60usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_5_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 59usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_5_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 59usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_5_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 59usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_5_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 59usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_6_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 58usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_6_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 58usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_6_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 58usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_6_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 58usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_7_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 57usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_7_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 57usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_7_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 57usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_7_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 57usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_8_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 56usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_8_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 56usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_8_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 56usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_8_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 56usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_9_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 55usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_9_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 55usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_9_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 55usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_9_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 55usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_10_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 54usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_10_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 54usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_10_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 54usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_10_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 54usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_11_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 53usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_11_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 53usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_11_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 53usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_11_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 53usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_12_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 52usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_12_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 52usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_12_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 52usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_12_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 52usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_13_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 51usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_13_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 51usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_13_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 51usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_13_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 51usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_14_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 50usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_14_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 50usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_14_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 50usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_14_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 50usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_15_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 49usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_15_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 49usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_15_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 49usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_15_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 49usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_16_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 48usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_16_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 48usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_16_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 48usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_16_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 48usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_17_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 47usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_17_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 47usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_17_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 47usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_17_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 47usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_18_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 46usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_18_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 46usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_18_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 46usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_18_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 46usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_19_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 45usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_19_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 45usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_19_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 45usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_19_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 45usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_20_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 44usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_20_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 44usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_20_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 44usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_20_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 44usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_21_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 43usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_21_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 43usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_21_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 43usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_21_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 43usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_22_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 42usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_22_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 42usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_22_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 42usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_22_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 42usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_23_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 41usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_23_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 41usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_23_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 41usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_23_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 41usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_24_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 40usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_24_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 40usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_24_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 40usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_24_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 40usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_25_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 39usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_25_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 39usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_25_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 39usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_25_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 39usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_26_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 38usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_26_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 38usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_26_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 38usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_26_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 38usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_27_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 37usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_27_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 37usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_27_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 37usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_27_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 37usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_28_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 36usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_28_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 36usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_28_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 36usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_28_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 36usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_29_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 35usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_29_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 35usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_29_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 35usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_29_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 35usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_30_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 34usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_30_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 34usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_30_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 34usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_30_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 34usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_31_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 33usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_31_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 33usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_31_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 33usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_31_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 33usize;
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_32_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
}
unsafe fn decode_u64_32_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
}
unsafe fn decode_u64_32_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
}
unsafe fn decode_u64_32_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    *o_ptr = out;
}
unsafe fn decode_u64_33_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_33_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_33_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_33_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 31usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_34_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_34_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_34_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_34_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 30usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_35_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_35_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_35_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_35_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 29usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_36_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_36_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_36_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_36_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 28usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_37_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_37_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_37_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_37_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 27usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_38_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_38_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_38_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_38_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 26usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_39_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_39_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_39_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_39_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 25usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_40_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_40_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_40_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_40_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 24usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_41_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_41_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_41_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_41_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 23usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_42_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_42_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_42_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_42_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 22usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_43_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_43_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_43_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_43_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 21usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_44_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_44_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_44_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_44_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 20usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_45_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_45_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_45_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_45_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 19usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_46_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_46_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_46_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_46_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 18usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_47_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_47_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_47_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_47_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 17usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_48_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_48_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_48_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_48_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 16usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_49_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_49_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_49_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_49_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 15usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_50_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_50_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_50_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_50_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 14usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_51_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_51_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_51_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_51_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 13usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_52_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_52_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_52_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_52_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 12usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_53_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_53_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_53_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_53_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 11usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_54_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_54_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_54_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_54_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 10usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_55_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_55_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_55_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_55_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 9usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_56_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_56_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_56_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_56_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 8usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_57_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_57_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_57_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_57_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 7usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_58_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_58_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_58_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_58_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 6usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_59_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_59_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_59_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_59_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 5usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_60_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_60_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_60_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_60_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 4usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_61_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_61_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 59usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_61_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 59usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_61_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 3usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 59usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_62_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_62_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_62_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_62_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 2usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_63_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_63_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_63_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_63_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mask: u64 = !0 >> 1usize;
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 31usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 1usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 33usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 30usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 2usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 34usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 29usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 3usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 35usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 28usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 4usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 36usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 27usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 5usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 37usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 26usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 6usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 38usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 25usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 7usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 39usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 24usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 8usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 40usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 23usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 9usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 41usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 22usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 10usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 42usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 21usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 11usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 43usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 20usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 12usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 44usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 19usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 13usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 45usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 18usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 14usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 46usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 17usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 15usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 47usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 16usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 16usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 48usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 15usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 17usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 49usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 14usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 18usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 50usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 13usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 19usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 51usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 12usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 20usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 52usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 11usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 21usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 53usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 10usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 22usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 54usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 9usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 23usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 55usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 8usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 24usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 56usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 7usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 25usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 57usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 6usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 26usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 58usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 5usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 27usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 59usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 4usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 28usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 60usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 3usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 29usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 61usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 2usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 30usize;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 62usize;
    *o_ptr = out & mask;
    o_ptr = o_ptr.offset(1);
    out = (*s_ptr >> 1usize) as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 31usize;
    *o_ptr = out & mask;
}
unsafe fn decode_u64_64_8(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
}
unsafe fn decode_u64_64_16(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
}
unsafe fn decode_u64_64_24(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
}
unsafe fn decode_u64_64_32(mut s_ptr: *const u32, mut o_ptr: *mut u64) {
    let mut out;
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
    o_ptr = o_ptr.offset(1);
    s_ptr = s_ptr.offset(1);
    out = *s_ptr as u64;
    s_ptr = s_ptr.offset(1);
    out |= (*s_ptr as u64) << 32usize;
    *o_ptr = out;
}
pub const DECODE_U64: [[unsafe fn(*const u32, *mut u64); 4usize]; 65usize] =
    [[decode_u64_0_8, decode_u64_0_16, decode_u64_0_24, decode_u64_0_32],
        [decode_u64_1_8, decode_u64_1_16, decode_u64_1_24, decode_u64_1_32],
        [decode_u64_2_8, decode_u64_2_16, decode_u64_2_24, decode_u64_2_32],
        [decode_u64_3_8, decode_u64_3_16, decode_u64_3_24, decode_u64_3_32],
        [decode_u64_4_8, decode_u64_4_16, decode_u64_4_24, decode_u64_4_32],
        [decode_u64_5_8, decode_u64_5_16, decode_u64_5_24, decode_u64_5_32],
        [decode_u64_6_8, decode_u64_6_16, decode_u64_6_24, decode_u64_6_32],
        [decode_u64_7_8, decode_u64_7_16, decode_u64_7_24, decode_u64_7_32],
        [decode_u64_8_8, decode_u64_8_16, decode_u64_8_24, decode_u64_8_32],
        [decode_u64_9_8, decode_u64_9_16, decode_u64_9_24, decode_u64_9_32],
        [decode_u64_10_8, decode_u64_10_16, decode_u64_10_24, decode_u64_10_32],
        [decode_u64_11_8, decode_u64_11_16, decode_u64_11_24, decode_u64_11_32],
        [decode_u64_12_8, decode_u64_12_16, decode_u64_12_24, decode_u64_12_32],
        [decode_u64_13_8, decode_u64_13_16, decode_u64_13_24, decode_u64_13_32],
        [decode_u64_14_8, decode_u64_14_16, decode_u64_14_24, decode_u64_14_32],
        [decode_u64_15_8, decode_u64_15_16, decode_u64_15_24, decode_u64_15_32],
        [decode_u64_16_8, decode_u64_16_16, decode_u64_16_24, decode_u64_16_32],
        [decode_u64_17_8, decode_u64_17_16, decode_u64_17_24, decode_u64_17_32],
        [decode_u64_18_8, decode_u64_18_16, decode_u64_18_24, decode_u64_18_32],
        [decode_u64_19_8, decode_u64_19_16, decode_u64_19_24, decode_u64_19_32],
        [decode_u64_20_8, decode_u64_20_16, decode_u64_20_24, decode_u64_20_32],
        [decode_u64_21_8, decode_u64_21_16, decode_u64_21_24, decode_u64_21_32],
        [decode_u64_22_8, decode_u64_22_16, decode_u64_22_24, decode_u64_22_32],
        [decode_u64_23_8, decode_u64_23_16, decode_u64_23_24, decode_u64_23_32],
        [decode_u64_24_8, decode_u64_24_16, decode_u64_24_24, decode_u64_24_32],
        [decode_u64_25_8, decode_u64_25_16, decode_u64_25_24, decode_u64_25_32],
        [decode_u64_26_8, decode_u64_26_16, decode_u64_26_24, decode_u64_26_32],
        [decode_u64_27_8, decode_u64_27_16, decode_u64_27_24, decode_u64_27_32],
        [decode_u64_28_8, decode_u64_28_16, decode_u64_28_24, decode_u64_28_32],
        [decode_u64_29_8, decode_u64_29_16, decode_u64_29_24, decode_u64_29_32],
        [decode_u64_30_8, decode_u64_30_16, decode_u64_30_24, decode_u64_30_32],
        [decode_u64_31_8, decode_u64_31_16, decode_u64_31_24, decode_u64_31_32],
        [decode_u64_32_8, decode_u64_32_16, decode_u64_32_24, decode_u64_32_32],
        [decode_u64_33_8, decode_u64_33_16, decode_u64_33_24, decode_u64_33_32],
        [decode_u64_34_8, decode_u64_34_16, decode_u64_34_24, decode_u64_34_32],
        [decode_u64_35_8, decode_u64_35_16, decode_u64_35_24, decode_u64_35_32],
        [decode_u64_36_8, decode_u64_36_16, decode_u64_36_24, decode_u64_36_32],
        [decode_u64_37_8, decode_u64_37_16, decode_u64_37_24, decode_u64_37_32],
        [decode_u64_38_8, decode_u64_38_16, decode_u64_38_24, decode_u64_38_32],
        [decode_u64_39_8, decode_u64_39_16, decode_u64_39_24, decode_u64_39_32],
        [decode_u64_40_8, decode_u64_40_16, decode_u64_40_24, decode_u64_40_32],
        [decode_u64_41_8, decode_u64_41_16, decode_u64_41_24, decode_u64_41_32],
        [decode_u64_42_8, decode_u64_42_16, decode_u64_42_24, decode_u64_42_32],
        [decode_u64_43_8, decode_u64_43_16, decode_u64_43_24, decode_u64_43_32],
        [decode_u64_44_8, decode_u64_44_16, decode_u64_44_24, decode_u64_44_32],
        [decode_u64_45_8, decode_u64_45_16, decode_u64_45_24, decode_u64_45_32],
        [decode_u64_46_8, decode_u64_46_16, decode_u64_46_24, decode_u64_46_32],
        [decode_u64_47_8, decode_u64_47_16, decode_u64_47_24, decode_u64_47_32],
        [decode_u64_48_8, decode_u64_48_16, decode_u64_48_24, decode_u64_48_32],
        [decode_u64_49_8, decode_u64_49_16, decode_u64_49_24, decode_u64_49_32],
        [decode_u64_50_8, decode_u64_50_16, decode_u64_50_24, decode_u64_50_32],
        [decode_u64_51_8, decode_u64_51_16, decode_u64_51_24, decode_u64_51_32],
        [decode_u64_52_8, decode_u64_52_16, decode_u64_52_24, decode_u64_52_32],
        [decode_u64_53_8, decode_u64_53_16, decode_u64_53_24, decode_u64_53_32],
        [decode_u64_54_8, decode_u64_54_16, decode_u64_54_24, decode_u64_54_32],
        [decode_u64_55_8, decode_u64_55_16, decode_u64_55_24, decode_u64_55_32],
        [decode_u64_56_8, decode_u64_56_16, decode_u64_56_24, decode_u64_56_32],
        [decode_u64_57_8, decode_u64_57_16, decode_u64_57_24, decode_u64_57_32],
        [decode_u64_58_8, decode_u64_58_16, decode_u64_58_24, decode_u64_58_32],
        [decode_u64_59_8, decode_u64_59_16, decode_u64_59_24, decode_u64_59_32],
        [decode_u64_60_8, decode_u64_60_16, decode_u64_60_24, decode_u64_60_32],
        [decode_u64_61_8, decode_u64_61_16, decode_u64_61_24, decode_u64_61_32],
        [decode_u64_62_8, decode_u64_62_16, decode_u64_62_24, decode_u64_62_32],
        [decode_u64_63_8, decode_u64_63_16, decode_u64_63_24, decode_u64_63_32],
        [decode_u64_64_8, decode_u64_64_16, decode_u64_64_24, decode_u64_64_32]];
unsafe fn encode_simd_u64_0(_: *const u64, _: *mut u32) { }
unsafe fn encode_simd_u64_1(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 2usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 51usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 53usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 55usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 57usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 58usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 59usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 61usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 62usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 0usize);
}
unsafe fn encode_simd_u64_2(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 4usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 58usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 62usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 58usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
}
unsafe fn encode_simd_u64_3(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 6usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 51usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 57usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 53usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 59usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 55usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 58usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 4usize);
}
unsafe fn encode_simd_u64_4(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 8usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 2usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 60usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
}
unsafe fn encode_simd_u64_5(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 10usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 55usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 51usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 57usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 53usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 58usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
}
unsafe fn encode_simd_u64_6(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 12usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 58usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
}
unsafe fn encode_simd_u64_7(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 14usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 55usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 53usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 51usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 12usize);
}
unsafe fn encode_simd_u64_8(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 16usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 2usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 6usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 56usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
}
unsafe fn encode_simd_u64_9(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 18usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 53usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 51usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 16usize);
}
unsafe fn encode_simd_u64_10(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 20usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 54usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
}
unsafe fn encode_simd_u64_11(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 22usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 51usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 20usize);
}
unsafe fn encode_simd_u64_12(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 24usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 52usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
}
unsafe fn encode_simd_u64_13(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 26usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 49usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 24usize);
}
unsafe fn encode_simd_u64_14(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 28usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 50usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 26usize);
}
unsafe fn encode_simd_u64_15(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 30usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 47usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 28usize);
}
unsafe fn encode_simd_u64_16(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 32usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 2usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 6usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 14usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 18usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 22usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 26usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 48usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
}
unsafe fn encode_simd_u64_17(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 34usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 45usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 32usize);
}
unsafe fn encode_simd_u64_18(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 36usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 46usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 34usize);
}
unsafe fn encode_simd_u64_19(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 38usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 43usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 36usize);
}
unsafe fn encode_simd_u64_20(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 40usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 18usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 44usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
}
unsafe fn encode_simd_u64_21(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 42usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 41usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 40usize);
}
unsafe fn encode_simd_u64_22(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 44usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 42usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 42usize);
}
unsafe fn encode_simd_u64_23(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 46usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 39usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 44usize);
}
unsafe fn encode_simd_u64_24(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 48usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 22usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 34usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 40usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
}
unsafe fn encode_simd_u64_25(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 50usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 37usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 48usize);
}
unsafe fn encode_simd_u64_26(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 52usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 38usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 50usize);
}
unsafe fn encode_simd_u64_27(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 54usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 35usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 52usize);
}
unsafe fn encode_simd_u64_28(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 56usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 26usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 36usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 54usize);
}
unsafe fn encode_simd_u64_29(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 58usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 33usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 56usize);
}
unsafe fn encode_simd_u64_30(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 60usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 34usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 58usize);
}
unsafe fn encode_simd_u64_31(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 62usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 31usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 60usize);
}
unsafe fn encode_simd_u64_32(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 64usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs.store(s_slice, 2usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 6usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 14usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs.store(s_slice, 18usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 22usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs.store(s_slice, 26usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 30usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs.store(s_slice, 34usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs.store(s_slice, 36usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 38usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs.store(s_slice, 42usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs.store(s_slice, 44usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 46usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs.store(s_slice, 50usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 54usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs.store(s_slice, 58usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 32usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs.store(s_slice, 60usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 62usize);
}
unsafe fn encode_simd_u64_33(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 66usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 29usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 64usize);
}
unsafe fn encode_simd_u64_34(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 68usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 30usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 66usize);
}
unsafe fn encode_simd_u64_35(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 70usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 27usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 68usize);
}
unsafe fn encode_simd_u64_36(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 72usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 34usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 28usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 70usize);
}
unsafe fn encode_simd_u64_37(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 74usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 25usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 72usize);
}
unsafe fn encode_simd_u64_38(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 76usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 26usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 36usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 74usize);
}
unsafe fn encode_simd_u64_39(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 78usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 23usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 76usize);
}
unsafe fn encode_simd_u64_40(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 80usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 18usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 38usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 58usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 24usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 68usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 78usize);
}
unsafe fn encode_simd_u64_41(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 82usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 21usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 80usize);
}
unsafe fn encode_simd_u64_42(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 84usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 22usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 82usize);
}
unsafe fn encode_simd_u64_43(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 86usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 19usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 84usize);
}
unsafe fn encode_simd_u64_44(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 88usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 42usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 20usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 64usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 86usize);
}
unsafe fn encode_simd_u64_45(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 90usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 17usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 88usize);
}
unsafe fn encode_simd_u64_46(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 92usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 18usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 44usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 90usize);
}
unsafe fn encode_simd_u64_47(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 94usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 15usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 92usize);
}
unsafe fn encode_simd_u64_48(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 96usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 22usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 34usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 46usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 58usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs.store(s_slice, 64usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 70usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs.store(s_slice, 76usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 82usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 16usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs.store(s_slice, 88usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 94usize);
}
unsafe fn encode_simd_u64_49(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 98usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 13usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 96usize);
}
unsafe fn encode_simd_u64_50(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 100usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 14usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 98usize);
}
unsafe fn encode_simd_u64_51(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 102usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 11usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 100usize);
}
unsafe fn encode_simd_u64_52(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 104usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 50usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 12usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 76usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 102usize);
}
unsafe fn encode_simd_u64_53(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 106usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 9usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 104usize);
}
unsafe fn encode_simd_u64_54(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 108usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 10usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 106usize);
}
unsafe fn encode_simd_u64_55(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 110usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 7usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 108usize);
}
unsafe fn encode_simd_u64_56(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 112usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 26usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 54usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 68usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 82usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 8usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 96usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 110usize);
}
unsafe fn encode_simd_u64_57(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 114usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 5usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 112usize);
}
unsafe fn encode_simd_u64_58(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 116usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 6usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 114usize);
}
unsafe fn encode_simd_u64_59(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 118usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 3usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 114usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 116usize);
}
unsafe fn encode_simd_u64_60(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 120usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 58usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 4usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 88usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 114usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 116usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 118usize);
}
unsafe fn encode_simd_u64_61(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 122usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 1usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 114usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 116usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 118usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 3usize;
    lhs.store(s_slice, 120usize);
}
unsafe fn encode_simd_u64_62(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 124usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 2usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 60usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 114usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 116usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 118usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 120usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 2usize;
    lhs.store(s_slice, 122usize);
}
unsafe fn encode_simd_u64_63(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 126usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs = lhs | rhs << 63usize;
    lhs.store(s_slice, 0usize);
    lhs = rhs >> 1usize;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs = lhs | rhs << 62usize;
    lhs.store(s_slice, 2usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs = lhs | rhs << 61usize;
    lhs.store(s_slice, 4usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs = lhs | rhs << 60usize;
    lhs.store(s_slice, 6usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs = lhs | rhs << 59usize;
    lhs.store(s_slice, 8usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs = lhs | rhs << 58usize;
    lhs.store(s_slice, 10usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs = lhs | rhs << 57usize;
    lhs.store(s_slice, 12usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs.store(s_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs = lhs | rhs << 55usize;
    lhs.store(s_slice, 16usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs = lhs | rhs << 54usize;
    lhs.store(s_slice, 18usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs = lhs | rhs << 53usize;
    lhs.store(s_slice, 20usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs = lhs | rhs << 52usize;
    lhs.store(s_slice, 22usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs = lhs | rhs << 51usize;
    lhs.store(s_slice, 24usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs = lhs | rhs << 50usize;
    lhs.store(s_slice, 26usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs = lhs | rhs << 49usize;
    lhs.store(s_slice, 28usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs.store(s_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs = lhs | rhs << 47usize;
    lhs.store(s_slice, 32usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs = lhs | rhs << 46usize;
    lhs.store(s_slice, 34usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs = lhs | rhs << 45usize;
    lhs.store(s_slice, 36usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs = lhs | rhs << 44usize;
    lhs.store(s_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs = lhs | rhs << 43usize;
    lhs.store(s_slice, 40usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs = lhs | rhs << 42usize;
    lhs.store(s_slice, 42usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs = lhs | rhs << 41usize;
    lhs.store(s_slice, 44usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    lhs.store(s_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs = lhs | rhs << 39usize;
    lhs.store(s_slice, 48usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs = lhs | rhs << 38usize;
    lhs.store(s_slice, 50usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs = lhs | rhs << 37usize;
    lhs.store(s_slice, 52usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs = lhs | rhs << 36usize;
    lhs.store(s_slice, 54usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs = lhs | rhs << 35usize;
    lhs.store(s_slice, 56usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs = lhs | rhs << 34usize;
    lhs.store(s_slice, 58usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs = lhs | rhs << 33usize;
    lhs.store(s_slice, 60usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs.store(s_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs = lhs | rhs << 31usize;
    lhs.store(s_slice, 64usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs = lhs | rhs << 30usize;
    lhs.store(s_slice, 66usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs = lhs | rhs << 29usize;
    lhs.store(s_slice, 68usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs = lhs | rhs << 28usize;
    lhs.store(s_slice, 70usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs = lhs | rhs << 27usize;
    lhs.store(s_slice, 72usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs = lhs | rhs << 26usize;
    lhs.store(s_slice, 74usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs = lhs | rhs << 25usize;
    lhs.store(s_slice, 76usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs = lhs | rhs << 24usize;
    lhs.store(s_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs = lhs | rhs << 23usize;
    lhs.store(s_slice, 80usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    lhs.store(s_slice, 82usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs = lhs | rhs << 21usize;
    lhs.store(s_slice, 84usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs = lhs | rhs << 20usize;
    lhs.store(s_slice, 86usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs = lhs | rhs << 19usize;
    lhs.store(s_slice, 88usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs = lhs | rhs << 18usize;
    lhs.store(s_slice, 90usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs = lhs | rhs << 17usize;
    lhs.store(s_slice, 92usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs = lhs | rhs << 16usize;
    lhs.store(s_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs = lhs | rhs << 15usize;
    lhs.store(s_slice, 96usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs = lhs | rhs << 14usize;
    lhs.store(s_slice, 98usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs = lhs | rhs << 13usize;
    lhs.store(s_slice, 100usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs = lhs | rhs << 12usize;
    lhs.store(s_slice, 102usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs = lhs | rhs << 11usize;
    lhs.store(s_slice, 104usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs = lhs | rhs << 10usize;
    lhs.store(s_slice, 106usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs = lhs | rhs << 9usize;
    lhs.store(s_slice, 108usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs = lhs | rhs << 8usize;
    lhs.store(s_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs = lhs | rhs << 7usize;
    lhs.store(s_slice, 112usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs = lhs | rhs << 6usize;
    lhs.store(s_slice, 114usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs = lhs | rhs << 5usize;
    lhs.store(s_slice, 116usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs = lhs | rhs << 4usize;
    lhs.store(s_slice, 118usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs = lhs | rhs << 3usize;
    lhs.store(s_slice, 120usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs = lhs | rhs << 2usize;
    lhs.store(s_slice, 122usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs = lhs | rhs << 1usize;
    lhs.store(s_slice, 124usize);
}
unsafe fn encode_simd_u64_64(i_ptr: *const u64, s_ptr: *mut u32) {
    let i_slice = slice::from_raw_parts(i_ptr, 128);
    let s_slice = slice::from_raw_parts_mut(s_ptr as *mut u64, 128usize);
    let rhs = simd::u64x2::load(i_slice, 0usize);
    let mut lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 2usize);
    lhs.store(s_slice, 0usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 4usize);
    lhs.store(s_slice, 2usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 6usize);
    lhs.store(s_slice, 4usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 8usize);
    lhs.store(s_slice, 6usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 10usize);
    lhs.store(s_slice, 8usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 12usize);
    lhs.store(s_slice, 10usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 14usize);
    lhs.store(s_slice, 12usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 16usize);
    lhs.store(s_slice, 14usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 18usize);
    lhs.store(s_slice, 16usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 20usize);
    lhs.store(s_slice, 18usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 22usize);
    lhs.store(s_slice, 20usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 24usize);
    lhs.store(s_slice, 22usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 26usize);
    lhs.store(s_slice, 24usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 28usize);
    lhs.store(s_slice, 26usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 30usize);
    lhs.store(s_slice, 28usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 32usize);
    lhs.store(s_slice, 30usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 34usize);
    lhs.store(s_slice, 32usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 36usize);
    lhs.store(s_slice, 34usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 38usize);
    lhs.store(s_slice, 36usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 40usize);
    lhs.store(s_slice, 38usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 42usize);
    lhs.store(s_slice, 40usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 44usize);
    lhs.store(s_slice, 42usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 46usize);
    lhs.store(s_slice, 44usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 48usize);
    lhs.store(s_slice, 46usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 50usize);
    lhs.store(s_slice, 48usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 52usize);
    lhs.store(s_slice, 50usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 54usize);
    lhs.store(s_slice, 52usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 56usize);
    lhs.store(s_slice, 54usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 58usize);
    lhs.store(s_slice, 56usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 60usize);
    lhs.store(s_slice, 58usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 62usize);
    lhs.store(s_slice, 60usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 64usize);
    lhs.store(s_slice, 62usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 66usize);
    lhs.store(s_slice, 64usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 68usize);
    lhs.store(s_slice, 66usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 70usize);
    lhs.store(s_slice, 68usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 72usize);
    lhs.store(s_slice, 70usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 74usize);
    lhs.store(s_slice, 72usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 76usize);
    lhs.store(s_slice, 74usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 78usize);
    lhs.store(s_slice, 76usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 80usize);
    lhs.store(s_slice, 78usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 82usize);
    lhs.store(s_slice, 80usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 84usize);
    lhs.store(s_slice, 82usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 86usize);
    lhs.store(s_slice, 84usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 88usize);
    lhs.store(s_slice, 86usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 90usize);
    lhs.store(s_slice, 88usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 92usize);
    lhs.store(s_slice, 90usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 94usize);
    lhs.store(s_slice, 92usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 96usize);
    lhs.store(s_slice, 94usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 98usize);
    lhs.store(s_slice, 96usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 100usize);
    lhs.store(s_slice, 98usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 102usize);
    lhs.store(s_slice, 100usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 104usize);
    lhs.store(s_slice, 102usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 106usize);
    lhs.store(s_slice, 104usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 108usize);
    lhs.store(s_slice, 106usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 110usize);
    lhs.store(s_slice, 108usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 112usize);
    lhs.store(s_slice, 110usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 114usize);
    lhs.store(s_slice, 112usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 116usize);
    lhs.store(s_slice, 114usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 118usize);
    lhs.store(s_slice, 116usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 120usize);
    lhs.store(s_slice, 118usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 122usize);
    lhs.store(s_slice, 120usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 124usize);
    lhs.store(s_slice, 122usize);
    lhs = rhs;
    let rhs = simd::u64x2::load(i_slice, 126usize);
    lhs.store(s_slice, 124usize);
    lhs = rhs;
    lhs.store(s_slice, 126usize);
}
pub const ENCODE_SIMD_U64: [unsafe fn(*const u64, *mut u32); 65usize] =
    [encode_simd_u64_0, encode_simd_u64_1, encode_simd_u64_2,
        encode_simd_u64_3, encode_simd_u64_4, encode_simd_u64_5,
        encode_simd_u64_6, encode_simd_u64_7, encode_simd_u64_8,
        encode_simd_u64_9, encode_simd_u64_10, encode_simd_u64_11,
        encode_simd_u64_12, encode_simd_u64_13, encode_simd_u64_14,
        encode_simd_u64_15, encode_simd_u64_16, encode_simd_u64_17,
        encode_simd_u64_18, encode_simd_u64_19, encode_simd_u64_20,
        encode_simd_u64_21, encode_simd_u64_22, encode_simd_u64_23,
        encode_simd_u64_24, encode_simd_u64_25, encode_simd_u64_26,
        encode_simd_u64_27, encode_simd_u64_28, encode_simd_u64_29,
        encode_simd_u64_30, encode_simd_u64_31, encode_simd_u64_32,
        encode_simd_u64_33, encode_simd_u64_34, encode_simd_u64_35,
        encode_simd_u64_36, encode_simd_u64_37, encode_simd_u64_38,
        encode_simd_u64_39, encode_simd_u64_40, encode_simd_u64_41,
        encode_simd_u64_42, encode_simd_u64_43, encode_simd_u64_44,
        encode_simd_u64_45, encode_simd_u64_46, encode_simd_u64_47,
        encode_simd_u64_48, encode_simd_u64_49, encode_simd_u64_50,
        encode_simd_u64_51, encode_simd_u64_52, encode_simd_u64_53,
        encode_simd_u64_54, encode_simd_u64_55, encode_simd_u64_56,
        encode_simd_u64_57, encode_simd_u64_58, encode_simd_u64_59,
        encode_simd_u64_60, encode_simd_u64_61, encode_simd_u64_62,
        encode_simd_u64_63, encode_simd_u64_64];
unsafe fn decode_simd_u64_0(_: *const u32, o_ptr: *mut u64) {
    ptr::write_bytes(o_ptr, 0u8, 128);
}
unsafe fn decode_simd_u64_1(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 2usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 59usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 61usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 62usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 63usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_2(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 4usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 62usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 62usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_3(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 6usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 59usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 61usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_4(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 8usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_5(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 10usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 59usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_6(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 12usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_7(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 14usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_8(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 16usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_9(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 18usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_10(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 20usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_11(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 22usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_12(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 24usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_13(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 26usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_14(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 28usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_15(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 30usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_16(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 32usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_17(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 34usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_18(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 36usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_19(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 38usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_20(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 40usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_21(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 42usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_22(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 44usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_23(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 46usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_24(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 48usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_25(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 50usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_26(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 52usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_27(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 54usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_28(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 56usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_29(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 58usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_30(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 60usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_31(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 62usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_32(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 64usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_33(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 66usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_34(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 68usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_35(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 70usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_36(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 72usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_37(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 74usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_38(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 76usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_39(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 78usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_40(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 80usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_41(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 82usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_42(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 84usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_43(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 86usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_44(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 88usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_45(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 90usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_46(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 92usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_47(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 94usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_48(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 96usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_49(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 98usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_50(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 100usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_51(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 102usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_52(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 104usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_53(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 106usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 11usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_54(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 108usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_55(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 110usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 9usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_56(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 112usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_57(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 114usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 7usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_58(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 116usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 6usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_59(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 118usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 5usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 116usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_60(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 120usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 4usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 116usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 118usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_61(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 122usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 3usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 59usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 116usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(s_slice, 118usize);
    lhs = lhs | rhs << 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(s_slice, 120usize);
    lhs = lhs | rhs << 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_62(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 124usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 2usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 116usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 118usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(s_slice, 120usize);
    lhs = lhs | rhs << 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(s_slice, 122usize);
    lhs = lhs | rhs << 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_63(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 126usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let mask = simd::u64x2::splat(!0) >> 1usize;
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs = lhs & mask;
    lhs.store(o_slice, 0usize);
    lhs = rhs >> 63usize;
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = lhs | rhs << 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 2usize);
    lhs = rhs >> 62usize;
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = lhs | rhs << 2usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 4usize);
    lhs = rhs >> 61usize;
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = lhs | rhs << 3usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 6usize);
    lhs = rhs >> 60usize;
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = lhs | rhs << 4usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 8usize);
    lhs = rhs >> 59usize;
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = lhs | rhs << 5usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 10usize);
    lhs = rhs >> 58usize;
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = lhs | rhs << 6usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 12usize);
    lhs = rhs >> 57usize;
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = lhs | rhs << 7usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 14usize);
    lhs = rhs >> 56usize;
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = lhs | rhs << 8usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 16usize);
    lhs = rhs >> 55usize;
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = lhs | rhs << 9usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 18usize);
    lhs = rhs >> 54usize;
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = lhs | rhs << 10usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 20usize);
    lhs = rhs >> 53usize;
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = lhs | rhs << 11usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 22usize);
    lhs = rhs >> 52usize;
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = lhs | rhs << 12usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 24usize);
    lhs = rhs >> 51usize;
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = lhs | rhs << 13usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 26usize);
    lhs = rhs >> 50usize;
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = lhs | rhs << 14usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 28usize);
    lhs = rhs >> 49usize;
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = lhs | rhs << 15usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 30usize);
    lhs = rhs >> 48usize;
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = lhs | rhs << 16usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 32usize);
    lhs = rhs >> 47usize;
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = lhs | rhs << 17usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 34usize);
    lhs = rhs >> 46usize;
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = lhs | rhs << 18usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 36usize);
    lhs = rhs >> 45usize;
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = lhs | rhs << 19usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 38usize);
    lhs = rhs >> 44usize;
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = lhs | rhs << 20usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 40usize);
    lhs = rhs >> 43usize;
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = lhs | rhs << 21usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 42usize);
    lhs = rhs >> 42usize;
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = lhs | rhs << 22usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 44usize);
    lhs = rhs >> 41usize;
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = lhs | rhs << 23usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 46usize);
    lhs = rhs >> 40usize;
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = lhs | rhs << 24usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 48usize);
    lhs = rhs >> 39usize;
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = lhs | rhs << 25usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 50usize);
    lhs = rhs >> 38usize;
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = lhs | rhs << 26usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 52usize);
    lhs = rhs >> 37usize;
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = lhs | rhs << 27usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 54usize);
    lhs = rhs >> 36usize;
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = lhs | rhs << 28usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 56usize);
    lhs = rhs >> 35usize;
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = lhs | rhs << 29usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 58usize);
    lhs = rhs >> 34usize;
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = lhs | rhs << 30usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 60usize);
    lhs = rhs >> 33usize;
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = lhs | rhs << 31usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 62usize);
    lhs = rhs >> 32usize;
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = lhs | rhs << 32usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 64usize);
    lhs = rhs >> 31usize;
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = lhs | rhs << 33usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 66usize);
    lhs = rhs >> 30usize;
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = lhs | rhs << 34usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 68usize);
    lhs = rhs >> 29usize;
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = lhs | rhs << 35usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 70usize);
    lhs = rhs >> 28usize;
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = lhs | rhs << 36usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 72usize);
    lhs = rhs >> 27usize;
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = lhs | rhs << 37usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 74usize);
    lhs = rhs >> 26usize;
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = lhs | rhs << 38usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 76usize);
    lhs = rhs >> 25usize;
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = lhs | rhs << 39usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 78usize);
    lhs = rhs >> 24usize;
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = lhs | rhs << 40usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 80usize);
    lhs = rhs >> 23usize;
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = lhs | rhs << 41usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 82usize);
    lhs = rhs >> 22usize;
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = lhs | rhs << 42usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 84usize);
    lhs = rhs >> 21usize;
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = lhs | rhs << 43usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 86usize);
    lhs = rhs >> 20usize;
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = lhs | rhs << 44usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 88usize);
    lhs = rhs >> 19usize;
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = lhs | rhs << 45usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 90usize);
    lhs = rhs >> 18usize;
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = lhs | rhs << 46usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 92usize);
    lhs = rhs >> 17usize;
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = lhs | rhs << 47usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 94usize);
    lhs = rhs >> 16usize;
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = lhs | rhs << 48usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 96usize);
    lhs = rhs >> 15usize;
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = lhs | rhs << 49usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 98usize);
    lhs = rhs >> 14usize;
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = lhs | rhs << 50usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 100usize);
    lhs = rhs >> 13usize;
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = lhs | rhs << 51usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 102usize);
    lhs = rhs >> 12usize;
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = lhs | rhs << 52usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 104usize);
    lhs = rhs >> 11usize;
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = lhs | rhs << 53usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 106usize);
    lhs = rhs >> 10usize;
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = lhs | rhs << 54usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 108usize);
    lhs = rhs >> 9usize;
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = lhs | rhs << 55usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 110usize);
    lhs = rhs >> 8usize;
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = lhs | rhs << 56usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 112usize);
    lhs = rhs >> 7usize;
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = lhs | rhs << 57usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 114usize);
    lhs = rhs >> 6usize;
    let rhs = simd::u64x2::load(s_slice, 116usize);
    lhs = lhs | rhs << 58usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 116usize);
    lhs = rhs >> 5usize;
    let rhs = simd::u64x2::load(s_slice, 118usize);
    lhs = lhs | rhs << 59usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 118usize);
    lhs = rhs >> 4usize;
    let rhs = simd::u64x2::load(s_slice, 120usize);
    lhs = lhs | rhs << 60usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 120usize);
    lhs = rhs >> 3usize;
    let rhs = simd::u64x2::load(s_slice, 122usize);
    lhs = lhs | rhs << 61usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 122usize);
    lhs = rhs >> 2usize;
    let rhs = simd::u64x2::load(s_slice, 124usize);
    lhs = lhs | rhs << 62usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 124usize);
    lhs = rhs >> 1usize;
    lhs = lhs & mask;
    lhs.store(o_slice, 126usize);
}
unsafe fn decode_simd_u64_64(s_ptr: *const u32, o_ptr: *mut u64) {
    let s_slice = slice::from_raw_parts(s_ptr as *const u64, 128usize);
    let o_slice = slice::from_raw_parts_mut(o_ptr, 128);
    let rhs = simd::u64x2::load(s_slice, 0usize);
    let mut lhs;
    lhs = rhs;
    lhs.store(o_slice, 0usize);
    let rhs = simd::u64x2::load(s_slice, 2usize);
    lhs = rhs;
    lhs.store(o_slice, 2usize);
    let rhs = simd::u64x2::load(s_slice, 4usize);
    lhs = rhs;
    lhs.store(o_slice, 4usize);
    let rhs = simd::u64x2::load(s_slice, 6usize);
    lhs = rhs;
    lhs.store(o_slice, 6usize);
    let rhs = simd::u64x2::load(s_slice, 8usize);
    lhs = rhs;
    lhs.store(o_slice, 8usize);
    let rhs = simd::u64x2::load(s_slice, 10usize);
    lhs = rhs;
    lhs.store(o_slice, 10usize);
    let rhs = simd::u64x2::load(s_slice, 12usize);
    lhs = rhs;
    lhs.store(o_slice, 12usize);
    let rhs = simd::u64x2::load(s_slice, 14usize);
    lhs = rhs;
    lhs.store(o_slice, 14usize);
    let rhs = simd::u64x2::load(s_slice, 16usize);
    lhs = rhs;
    lhs.store(o_slice, 16usize);
    let rhs = simd::u64x2::load(s_slice, 18usize);
    lhs = rhs;
    lhs.store(o_slice, 18usize);
    let rhs = simd::u64x2::load(s_slice, 20usize);
    lhs = rhs;
    lhs.store(o_slice, 20usize);
    let rhs = simd::u64x2::load(s_slice, 22usize);
    lhs = rhs;
    lhs.store(o_slice, 22usize);
    let rhs = simd::u64x2::load(s_slice, 24usize);
    lhs = rhs;
    lhs.store(o_slice, 24usize);
    let rhs = simd::u64x2::load(s_slice, 26usize);
    lhs = rhs;
    lhs.store(o_slice, 26usize);
    let rhs = simd::u64x2::load(s_slice, 28usize);
    lhs = rhs;
    lhs.store(o_slice, 28usize);
    let rhs = simd::u64x2::load(s_slice, 30usize);
    lhs = rhs;
    lhs.store(o_slice, 30usize);
    let rhs = simd::u64x2::load(s_slice, 32usize);
    lhs = rhs;
    lhs.store(o_slice, 32usize);
    let rhs = simd::u64x2::load(s_slice, 34usize);
    lhs = rhs;
    lhs.store(o_slice, 34usize);
    let rhs = simd::u64x2::load(s_slice, 36usize);
    lhs = rhs;
    lhs.store(o_slice, 36usize);
    let rhs = simd::u64x2::load(s_slice, 38usize);
    lhs = rhs;
    lhs.store(o_slice, 38usize);
    let rhs = simd::u64x2::load(s_slice, 40usize);
    lhs = rhs;
    lhs.store(o_slice, 40usize);
    let rhs = simd::u64x2::load(s_slice, 42usize);
    lhs = rhs;
    lhs.store(o_slice, 42usize);
    let rhs = simd::u64x2::load(s_slice, 44usize);
    lhs = rhs;
    lhs.store(o_slice, 44usize);
    let rhs = simd::u64x2::load(s_slice, 46usize);
    lhs = rhs;
    lhs.store(o_slice, 46usize);
    let rhs = simd::u64x2::load(s_slice, 48usize);
    lhs = rhs;
    lhs.store(o_slice, 48usize);
    let rhs = simd::u64x2::load(s_slice, 50usize);
    lhs = rhs;
    lhs.store(o_slice, 50usize);
    let rhs = simd::u64x2::load(s_slice, 52usize);
    lhs = rhs;
    lhs.store(o_slice, 52usize);
    let rhs = simd::u64x2::load(s_slice, 54usize);
    lhs = rhs;
    lhs.store(o_slice, 54usize);
    let rhs = simd::u64x2::load(s_slice, 56usize);
    lhs = rhs;
    lhs.store(o_slice, 56usize);
    let rhs = simd::u64x2::load(s_slice, 58usize);
    lhs = rhs;
    lhs.store(o_slice, 58usize);
    let rhs = simd::u64x2::load(s_slice, 60usize);
    lhs = rhs;
    lhs.store(o_slice, 60usize);
    let rhs = simd::u64x2::load(s_slice, 62usize);
    lhs = rhs;
    lhs.store(o_slice, 62usize);
    let rhs = simd::u64x2::load(s_slice, 64usize);
    lhs = rhs;
    lhs.store(o_slice, 64usize);
    let rhs = simd::u64x2::load(s_slice, 66usize);
    lhs = rhs;
    lhs.store(o_slice, 66usize);
    let rhs = simd::u64x2::load(s_slice, 68usize);
    lhs = rhs;
    lhs.store(o_slice, 68usize);
    let rhs = simd::u64x2::load(s_slice, 70usize);
    lhs = rhs;
    lhs.store(o_slice, 70usize);
    let rhs = simd::u64x2::load(s_slice, 72usize);
    lhs = rhs;
    lhs.store(o_slice, 72usize);
    let rhs = simd::u64x2::load(s_slice, 74usize);
    lhs = rhs;
    lhs.store(o_slice, 74usize);
    let rhs = simd::u64x2::load(s_slice, 76usize);
    lhs = rhs;
    lhs.store(o_slice, 76usize);
    let rhs = simd::u64x2::load(s_slice, 78usize);
    lhs = rhs;
    lhs.store(o_slice, 78usize);
    let rhs = simd::u64x2::load(s_slice, 80usize);
    lhs = rhs;
    lhs.store(o_slice, 80usize);
    let rhs = simd::u64x2::load(s_slice, 82usize);
    lhs = rhs;
    lhs.store(o_slice, 82usize);
    let rhs = simd::u64x2::load(s_slice, 84usize);
    lhs = rhs;
    lhs.store(o_slice, 84usize);
    let rhs = simd::u64x2::load(s_slice, 86usize);
    lhs = rhs;
    lhs.store(o_slice, 86usize);
    let rhs = simd::u64x2::load(s_slice, 88usize);
    lhs = rhs;
    lhs.store(o_slice, 88usize);
    let rhs = simd::u64x2::load(s_slice, 90usize);
    lhs = rhs;
    lhs.store(o_slice, 90usize);
    let rhs = simd::u64x2::load(s_slice, 92usize);
    lhs = rhs;
    lhs.store(o_slice, 92usize);
    let rhs = simd::u64x2::load(s_slice, 94usize);
    lhs = rhs;
    lhs.store(o_slice, 94usize);
    let rhs = simd::u64x2::load(s_slice, 96usize);
    lhs = rhs;
    lhs.store(o_slice, 96usize);
    let rhs = simd::u64x2::load(s_slice, 98usize);
    lhs = rhs;
    lhs.store(o_slice, 98usize);
    let rhs = simd::u64x2::load(s_slice, 100usize);
    lhs = rhs;
    lhs.store(o_slice, 100usize);
    let rhs = simd::u64x2::load(s_slice, 102usize);
    lhs = rhs;
    lhs.store(o_slice, 102usize);
    let rhs = simd::u64x2::load(s_slice, 104usize);
    lhs = rhs;
    lhs.store(o_slice, 104usize);
    let rhs = simd::u64x2::load(s_slice, 106usize);
    lhs = rhs;
    lhs.store(o_slice, 106usize);
    let rhs = simd::u64x2::load(s_slice, 108usize);
    lhs = rhs;
    lhs.store(o_slice, 108usize);
    let rhs = simd::u64x2::load(s_slice, 110usize);
    lhs = rhs;
    lhs.store(o_slice, 110usize);
    let rhs = simd::u64x2::load(s_slice, 112usize);
    lhs = rhs;
    lhs.store(o_slice, 112usize);
    let rhs = simd::u64x2::load(s_slice, 114usize);
    lhs = rhs;
    lhs.store(o_slice, 114usize);
    let rhs = simd::u64x2::load(s_slice, 116usize);
    lhs = rhs;
    lhs.store(o_slice, 116usize);
    let rhs = simd::u64x2::load(s_slice, 118usize);
    lhs = rhs;
    lhs.store(o_slice, 118usize);
    let rhs = simd::u64x2::load(s_slice, 120usize);
    lhs = rhs;
    lhs.store(o_slice, 120usize);
    let rhs = simd::u64x2::load(s_slice, 122usize);
    lhs = rhs;
    lhs.store(o_slice, 122usize);
    let rhs = simd::u64x2::load(s_slice, 124usize);
    lhs = rhs;
    lhs.store(o_slice, 124usize);
    let rhs = simd::u64x2::load(s_slice, 126usize);
    lhs = rhs;
    lhs.store(o_slice, 126usize);
}
pub const DECODE_SIMD_U64: [unsafe fn(*const u32, *mut u64); 65usize] =
    [decode_simd_u64_0, decode_simd_u64_1, decode_simd_u64_2,
        decode_simd_u64_3, decode_simd_u64_4, decode_simd_u64_5,
        decode_simd_u64_6, decode_simd_u64_7, decode_simd_u64_8,
        decode_simd_u64_9, decode_simd_u64_10, decode_simd_u64_11,
        decode_simd_u64_12, decode_simd_u64_13, decode_simd_u64_14,
        decode_simd_u64_15, decode_simd_u64_16, decode_simd_u64_17,
        decode_simd_u64_18, decode_simd_u64_19, decode_simd_u64_20,
        decode_simd_u64_21, decode_simd_u64_22, decode_simd_u64_23,
        decode_simd_u64_24, decode_simd_u64_25, decode_simd_u64_26,
        decode_simd_u64_27, decode_simd_u64_28, decode_simd_u64_29,
        decode_simd_u64_30, decode_simd_u64_31, decode_simd_u64_32,
        decode_simd_u64_33, decode_simd_u64_34, decode_simd_u64_35,
        decode_simd_u64_36, decode_simd_u64_37, decode_simd_u64_38,
        decode_simd_u64_39, decode_simd_u64_40, decode_simd_u64_41,
        decode_simd_u64_42, decode_simd_u64_43, decode_simd_u64_44,
        decode_simd_u64_45, decode_simd_u64_46, decode_simd_u64_47,
        decode_simd_u64_48, decode_simd_u64_49, decode_simd_u64_50,
        decode_simd_u64_51, decode_simd_u64_52, decode_simd_u64_53,
        decode_simd_u64_54, decode_simd_u64_55, decode_simd_u64_56,
        decode_simd_u64_57, decode_simd_u64_58, decode_simd_u64_59,
        decode_simd_u64_60, decode_simd_u64_61, decode_simd_u64_62,
        decode_simd_u64_63, decode_simd_u64_64];
pub unsafe fn encode_delta_u64(i_ptr: *mut u64, length: usize) {
    for a in (1..(length as isize)).rev() {
        let lwr = *i_ptr.offset(a - 1);
        *i_ptr.offset(a) = (*i_ptr.offset(a)).wrapping_sub(lwr);
    }
}
pub unsafe fn encode_zz_shift_u64(i_ptr: *mut u64, length: usize,
                                  shift: u64) {
    let i_ptr: *mut i64 = i_ptr as *mut i64;
    let shift: i64 = shift as i64;
    for a in 0..(length as isize) {
        let rhs = (*i_ptr.offset(a)).wrapping_sub(shift);
        *i_ptr.offset(a) = (rhs << 1) ^ (rhs >> 63usize);
    }
}

